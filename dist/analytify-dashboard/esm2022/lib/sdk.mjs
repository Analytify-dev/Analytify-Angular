class AnalytifySDK {
    constructor() {
        this.clientId = '';
        this.apiBaseUrl = 'https://api.analytify.com';
    }
    static init(config) {
        if (!AnalytifySDK.instance) {
            AnalytifySDK.instance = new AnalytifySDK();
            AnalytifySDK.instance.clientId = config.clientId;
            if (config.apiBaseUrl) {
                AnalytifySDK.instance.apiBaseUrl = config.apiBaseUrl;
            }
        }
        return AnalytifySDK.instance;
    }
    loadDashboard(options) {
        const container = typeof options.container === 'string'
            ? document.querySelector(options.container)
            : options.container;
        if (!container) {
            throw new Error('Container element not found');
        }
        const iframe = document.createElement('iframe');
        const publicDashboardId = btoa(options.dashboardId.toString());
        // this.dashboardUrl = `https://qa.insightapps.ai/public/dashboard/${publicDashboardId}`;
        iframe.src = `https://qa.insightapps.ai/public/dashboard/${publicDashboardId}`;
        iframe.style.border = 'none';
        iframe.style.width = options.width || '100%';
        iframe.style.height = options.height || '100%';
        container.innerHTML = '';
        container.appendChild(iframe);
    }
}
// Global variable for CDN users
if (typeof window !== 'undefined') {
    window.Analytify = AnalytifySDK;
}
export default AnalytifySDK;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2RrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5hbHl0aWZ5LWRhc2hib2FyZC9zcmMvbGliL3Nkay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLFlBQVk7SUFLZDtRQUhRLGFBQVEsR0FBVyxFQUFFLENBQUM7UUFDdEIsZUFBVSxHQUFXLDJCQUEyQixDQUFDO0lBRWxDLENBQUM7SUFFeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFpRDtRQUMzRCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRTtZQUMxQixZQUFZLENBQUMsUUFBUSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7WUFDM0MsWUFBWSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztZQUNqRCxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7Z0JBQ3JCLFlBQVksQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7YUFDdEQ7U0FDRjtRQUNELE9BQU8sWUFBWSxDQUFDLFFBQVEsQ0FBQztJQUMvQixDQUFDO0lBRUQsYUFBYSxDQUFDLE9BS2I7UUFDQyxNQUFNLFNBQVMsR0FBRyxPQUFPLE9BQU8sQ0FBQyxTQUFTLEtBQUssUUFBUTtZQUNyRCxDQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQzNDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBRXRCLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7U0FDaEQ7UUFFRCxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hELE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNqRSx5RkFBeUY7UUFDdkYsTUFBTSxDQUFDLEdBQUcsR0FBRyw4Q0FBOEMsaUJBQWlCLEVBQUUsQ0FBQztRQUMvRSxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDN0IsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUM7UUFDN0MsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUM7UUFFL0MsU0FBUyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDekIsU0FBUyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDO0NBQ0Y7QUFFRCxnQ0FBZ0M7QUFDaEMsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLEVBQUU7SUFDaEMsTUFBYyxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUM7Q0FDMUM7QUFFRCxlQUFlLFlBQVksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEFuYWx5dGlmeVNESyB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogQW5hbHl0aWZ5U0RLO1xyXG4gICAgcHJpdmF0ZSBjbGllbnRJZDogc3RyaW5nID0gJyc7XHJcbiAgICBwcml2YXRlIGFwaUJhc2VVcmw6IHN0cmluZyA9ICdodHRwczovL2FwaS5hbmFseXRpZnkuY29tJztcclxuICBcclxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxyXG4gIFxyXG4gICAgc3RhdGljIGluaXQoY29uZmlnOiB7IGNsaWVudElkOiBzdHJpbmc7IGFwaUJhc2VVcmw/OiBzdHJpbmcgfSk6IEFuYWx5dGlmeVNESyB7XHJcbiAgICAgIGlmICghQW5hbHl0aWZ5U0RLLmluc3RhbmNlKSB7XHJcbiAgICAgICAgQW5hbHl0aWZ5U0RLLmluc3RhbmNlID0gbmV3IEFuYWx5dGlmeVNESygpO1xyXG4gICAgICAgIEFuYWx5dGlmeVNESy5pbnN0YW5jZS5jbGllbnRJZCA9IGNvbmZpZy5jbGllbnRJZDtcclxuICAgICAgICBpZiAoY29uZmlnLmFwaUJhc2VVcmwpIHtcclxuICAgICAgICAgIEFuYWx5dGlmeVNESy5pbnN0YW5jZS5hcGlCYXNlVXJsID0gY29uZmlnLmFwaUJhc2VVcmw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBBbmFseXRpZnlTREsuaW5zdGFuY2U7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBsb2FkRGFzaGJvYXJkKG9wdGlvbnM6IHtcclxuICAgICAgZGFzaGJvYXJkSWQ6IHN0cmluZztcclxuICAgICAgY29udGFpbmVyOiBzdHJpbmcgfCBIVE1MRWxlbWVudDtcclxuICAgICAgd2lkdGg/OiBzdHJpbmc7XHJcbiAgICAgIGhlaWdodD86IHN0cmluZztcclxuICAgIH0pOiB2b2lkIHtcclxuICAgICAgY29uc3QgY29udGFpbmVyID0gdHlwZW9mIG9wdGlvbnMuY29udGFpbmVyID09PSAnc3RyaW5nJyBcclxuICAgICAgICA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iob3B0aW9ucy5jb250YWluZXIpIFxyXG4gICAgICAgIDogb3B0aW9ucy5jb250YWluZXI7XHJcbiAgXHJcbiAgICAgIGlmICghY29udGFpbmVyKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb250YWluZXIgZWxlbWVudCBub3QgZm91bmQnKTtcclxuICAgICAgfVxyXG4gIFxyXG4gICAgICBjb25zdCBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcclxuICAgICAgY29uc3QgcHVibGljRGFzaGJvYXJkSWQgPSBidG9hKG9wdGlvbnMuZGFzaGJvYXJkSWQudG9TdHJpbmcoKSk7XHJcbiAgICAvLyB0aGlzLmRhc2hib2FyZFVybCA9IGBodHRwczovL3FhLmluc2lnaHRhcHBzLmFpL3B1YmxpYy9kYXNoYm9hcmQvJHtwdWJsaWNEYXNoYm9hcmRJZH1gO1xyXG4gICAgICBpZnJhbWUuc3JjID0gYGh0dHBzOi8vcWEuaW5zaWdodGFwcHMuYWkvcHVibGljL2Rhc2hib2FyZC8ke3B1YmxpY0Rhc2hib2FyZElkfWA7XHJcbiAgICAgIGlmcmFtZS5zdHlsZS5ib3JkZXIgPSAnbm9uZSc7XHJcbiAgICAgIGlmcmFtZS5zdHlsZS53aWR0aCA9IG9wdGlvbnMud2lkdGggfHwgJzEwMCUnO1xyXG4gICAgICBpZnJhbWUuc3R5bGUuaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQgfHwgJzEwMCUnO1xyXG4gIFxyXG4gICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpZnJhbWUpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAvLyBHbG9iYWwgdmFyaWFibGUgZm9yIENETiB1c2Vyc1xyXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgKHdpbmRvdyBhcyBhbnkpLkFuYWx5dGlmeSA9IEFuYWx5dGlmeVNESztcclxuICB9XHJcbiAgXHJcbiAgZXhwb3J0IGRlZmF1bHQgQW5hbHl0aWZ5U0RLOyJdfQ==